{"version":3,"sources":["components/cardbox/Card.js","components/maincontainer/container.js","components/Score/Score.js","App.js","unregisterServiceWorker.js","index.js"],"names":["Card","props","className","alt","name","src","image","id","onClick","shuffleScoreCard","mainCont","children","Score","total","status","App","state","cars","clickedIdCars","score","goal","shuffleCard","includes","setState","push","length","console","log","i","j","Math","floor","random","this","map","car","key","href","target","rel","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","unregisterServiceWorker"],"mappings":"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","file":"static/js/main.a8036f7e.chunk.js","sourcesContent":["//This is where the card is to be rendered\nimport React from \"react\";\nimport \"./Card.css\";\n\nconst Card = props => (\n  <div className=\"card\">\n      <img alt={props.name} src={props.image} id={props.id}\n        onClick={() => props.shuffleScoreCard(props.id)} className='shuffleScore'/>\n  </div>\n);\n\nexport default Card;","// Issues getting cards.json to show the images are throwing a error that doesnt allow the array to load\n// cards.json does not allow spaces or commits above (good JOB JOEL TOOK YOU LONG ENOUGH!)\nimport React from \"react\";\nimport \"./container.css\";\n\n//stateless component\nconst mainCont = props => <div className=\"mainContainer\">{props.children}</div>;\n\nexport default mainCont;","//Import Score.css and set up status for css\nimport React from \"react\";\nimport \"./Score.css\";\n\n\n//stateless component\nconst Score = props => (\n  <div className=\"gameScore\">\n    <h3 className=\"score\">Score = {props.total}</h3>\n    <h3 className=\"status\">{props.status}</h3>\n  </div>\n);\n\nexport default Score;","//set up all dependencies and routes \n// Setting the state for cars to json array\n//shuffle the cars cards when they are clicked\n// render a Card component for each card object\nimport React, { Component } from \"react\";\nimport Card from \"./components/cardbox/Card\";\nimport Container from \"./components/maincontainer/container\";\nimport Score from \"./components/Score\";\nimport cars from \"./cards.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  \n  state = {\n    cars,\n    clickedIdCars: [],\n    score: 0,\n    goal: 8,\n    status: \"\"\n  };\n\n  shuffleCard = id => {\n    let clickedIdCars = this.state.clickedIdCars;\n\n    if(clickedIdCars.includes(id)){\n      this.setState({ clickedIdCars: [], score: 0, status:  \"Game Over! Bet you wont try again! Click to play again!\" });\n      return;\n    }else{\n      clickedIdCars.push(id)\n\n      if(clickedIdCars.length === 8){\n        this.setState({score: 8, status: \"You actually did it!\", clickedIdCars: []});\n        console.log('You Win');\n        return;\n      }\n\n      this.setState({ cars, clickedIdCars, score: clickedIdCars.length, status: \" \" });\n\n      for (let i = cars.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [cars[i], cars[j]] = [cars[j], cars[i]];\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"mainHeader\">\n          <h1 className=\"mainTitle\">Clicky Game</h1>\n          <p className=\"headerInstruction\">\n            Dont Click on the same image twice! \n          </p>\n        </header>\n\n        <Container>\n          {this.state.cars.map(car => (\n            <Card\n              shuffleScoreCard={this.shuffleCard}\n              id={car.id}\n              key={car.id}\n              image={car.image}\n            />\n          ))}\n        </Container>\n\n        <Score total={this.state.score}\n               goal={8}\n               status={this.state.status}\n               />\n                      \n        <footer>\n          <p>Built by Joel Buentello, to see the code please click the following link<a href=\"https://github.com/jbuentello/Clicky-Game\" target=\"_blank\" rel=\"noopener noreferrer\"> Code</a>.</p>\n        </footer>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport unregisterServiceWorker from './unregisterServiceWorker.js';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nunregisterServiceWorker();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}